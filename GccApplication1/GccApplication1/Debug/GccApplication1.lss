
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000008e  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059d  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000503  00000000  00000000  0000073d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006e  00000000  00000000  00001217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee e8       	ldi	r30, 0x8E	; 142
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	1c d0       	rcall	.+56     	; 0x7e <main>
  46:	21 c0       	rjmp	.+66     	; 0x8a <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <delay>:
#define BUTM PORTA1

int stime = 1000;

void delay(int ms){
	for(;ms;ms--)
  4a:	07 c0       	rjmp	.+14     	; 0x5a <delay+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	e9 ef       	ldi	r30, 0xF9	; 249
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	31 97       	sbiw	r30, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <delay+0x6>
  54:	00 c0       	rjmp	.+0      	; 0x56 <delay+0xc>
  56:	00 00       	nop
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	00 97       	sbiw	r24, 0x00	; 0
  5c:	b9 f7       	brne	.-18     	; 0x4c <delay+0x2>
	_delay_ms(1);
}
  5e:	08 95       	ret

00000060 <blink>:
//	}
//}

void blink()
{
	PORTA = (1<<LED1)|(0<<LED2);
  60:	84 e0       	ldi	r24, 0x04	; 4
  62:	8b bb       	out	0x1b, r24	; 27
	delay(stime);
  64:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  68:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  6c:	ee df       	rcall	.-36     	; 0x4a <delay>
	PORTA = (0<<LED1)|(1<<LED2);
  6e:	88 e0       	ldi	r24, 0x08	; 8
  70:	8b bb       	out	0x1b, r24	; 27
	delay(stime);
  72:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  76:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  7a:	e7 df       	rcall	.-50     	; 0x4a <delay>
  7c:	08 95       	ret

0000007e <main>:
}

int main(void)
{
//	sei();
	DDRA = (1<<LED1)|(1<<LED2)|(0<<BUTM)|(0<<BUTP);
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<BUTP)|(1<<BUTM);
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	8b bb       	out	0x1b, r24	; 27
    {
		if(PINA0==0)
		{
			stime+100;
		}
		blink();
  86:	ec df       	rcall	.-40     	; 0x60 <blink>
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x8>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
